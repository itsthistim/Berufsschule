---
//#region Layouts & Components
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Breadcrumbs from '../components/Single/Breadcrumbs.astro';
import BackToTop from '../components/BackToTop.astro';
import Footer from '../components/Footer.astro';
//#endregion

const crumbs = [{ name: 'Home', href: '/' }, { name: 'Suche' }];

//#region Form Validation
import Patient from '../models/patient.js';
import moment from 'moment';

let loading = null;
let values = null;
let results = null;
const errors = { svnr: '', birthday: '', general: '', svnrFull: '' };
let patient = null;

if (Astro.request.method === 'POST') {
	loading = true;
	values = { svnr: '', birthday: '', timerange: '', x_month: '' };

	try {
		const data = await Astro.request.formData();
		const svnr = data.get('svnr');
		const birthday = data.get('birthday');
		const timerange = data.get('timerange');
		const x_month: number = parseFloat(data.get('x_month').toString());

		// prevent clearing the input fields
		Object.assign(values, { svnr, birthday, timerange, x_month });

		// svnr validation (4 digit number)
		if (!svnr || svnr.length !== 4) {
			errors.svnr = 'Ung체ltige SV-Nummer!';
		}

		// birthday validation (date)
		if (!birthday || !moment(birthday.toString(), 'YYYY-MM-DD', true).isValid()) {
			errors.birthday = 'Bitte geben Sie ein g체ltiges Geburtsdatum ein.';
		}

		// get patient by svnr
		try {
			patient = await Patient.getBySVNR(svnr, birthday);
		} catch (err) {
			errors.svnrFull = err.message;
		}

		// get behandlungsdaten
		if (patient) {
			let start = null;
			let end = null;

			switch (timerange) {
				case 'last_month':
					start = moment().subtract(1, 'months').startOf('month').format('YYYY-MM-DD');
					end = moment().subtract(1, 'months').endOf('month').format('YYYY-MM-DD');
					break;
				case 'current_month':
					start = moment().startOf('month').format('YYYY-MM-DD');
					end = moment().endOf('month').format('YYYY-MM-DD');
					break;
				case 'month_year':
					if (!x_month) {
						throw new Error('Bitte geben Sie einen g체ltigen Monat ein.');
					} else {
						start = moment().month(x_month - 1).startOf('month').format('YYYY-MM-DD');
						end = moment().month(x_month - 1).endOf('month').format('YYYY-MM-DD');
					}
					break;
				default:
					start = moment().subtract(100, 'years').startOf('year').format('YYYY-MM-DD');
					end = moment().format('YYYY-MM-DD');
			}

			try {
				const behandlungsdaten = await Patient.getBehandlungsdaten(svnr, birthday, start, end, true);
				results = behandlungsdaten;
			} catch (err) {
				errors.general = err.message;
			}
		}

		loading = false;
	} catch (error) {
		loading = false;
		errors.general = error.message;
	}
}

//#endregion
---

<Layout title="Suche - Zeitspanne">
	<Header isIndex={false} />
	<Breadcrumbs crumbs={crumbs} />

	<main id="main">
		<section id="register" class="register">
			<div class="container">
				<div class="center">
					<h2>Patientensuche</h2>
					<h3>Suche mit <span>Zeitspanne</span></h3>
					<p>Die Datenbank nach der <strong>Sozialversicherungsnummer</strong> eines Patient durchsuchen und eine <strong>Zeitspanne</strong> angeben um die Diagnosen einzusehen.</p>
				</div>

				<div class="mx-auto mt-4" style="width: 388px;">
					<form method="POST" role="form" class="register-form">
						<h2>Patient</h2>
						<div class="row">
							<div class="col-md-6 form-group">
								<label for="svnr">SV-Nummer:</label>
								<input type="number" class="form-control rounded" name="svnr" id="svnr" required value={values?.svnr} />
								{errors.svnr && <div class="text-danger">{errors.svnr}</div>}
							</div>
							<div class="col-md-6 form-group mt-3 mt-md-0">
								<label for="birthday">Geburtsdatum:</label>
								<input type="date" class="form-control rounded" name="birthday" id="birthday" placeholder="Sozialversicherungsnummer" required value={values?.birthday} />
								{errors.birthday && <div class="text-danger">{errors.birthday}</div>}
							</div>
						</div>
						{errors.svnrFull && <div class="text-danger">{errors.svnrFull}</div>}
						<hr />
						<h2>Zeitspanne</h2>
						<div class="mt-3">
							<div class="form-check">
								<input class="form-check-input" type="radio" name="timerange" value="last_month" id="last_month" />
								<label class="form-check-label" for="last_month">Letzter Monat</label>
							</div>
							<div class="form-check">
								<input class="form-check-input" type="radio" name="timerange" value="current_month" id="current_month" />
								<label class="form-check-label" for="current_month">Laufender Monat</label>
							</div>
							<div class="form-check d-flex">
								<input class="form-check-input" type="radio" name="timerange" value="month_year" id="month_year" />
								<input type="number" class="form-control rounded" name="x_month" id="x_month" placeholder="4" style="width: 40px; height: 25px" min="1" max="12" />
								<label class="form-check-label" for="month_year">. Monat des laufenden Jahres</label>
							</div>
						</div>

						<div class="my-3">
							{loading === true && <div class="rounded loading">Loading...</div>}
						</div>

						<div class="text-center"><button type="submit">Suche</button></div>
					</form>
				</div>

				{
					errors.general && (
						<div class="mx-auto my-5 center" style="width: 900px">
							<h4>{errors.general}</h4>
							<p>Versuchen Sie es sp채ter erneut.</p>
						</div>
					)
				}

				{
					patient && (
						<div class="mx-auto my-4" style="width: 900px">
							<table class="table">
								<thead>
									<tr>
										<th scope="col">Zeitraum</th>
										<th scope="col">Patient</th>
										<th scope="col">SVNr</th>
										<th scope="col">Diagnose</th>
									</tr>
								</thead>
								<tbody>
									{results &&
										results.map((result) => (
											<tr>
												<td>{result.zeitraum}</td>
												<td>{result.patient}</td>
												<td>{result.svnr}</td>
												<td>{result.diagnose}</td>
											</tr>
										))}
								</tbody>
							</table>
						</div>
					)
				}
			</div>
		</section>
	</main>

	<!-- <Footer /> -->
	<BackToTop />
</Layout>

<style>
	/* Hide arrow buttons in number input */
	input::-webkit-outer-spin-button,
	input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	.input-group-text {
		height: 100%;
		border-radius: 0;
	}

	.btn {
		margin: 0px 30px 5px;
	}

	i {
		font-size: 30px;
		color: #444;
		line-height: 1;
		-webkit-transition: 0.3s;
		transition: 0.3s;
	}

	i:hover {
		color: var(--primary);
	}

	.flex-c-m {
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-box;
		display: -ms-flexbox;
		display: flex;
		justify-content: center;
		-ms-align-items: center;
		align-items: center;
	}

	.center {
		text-align: center;
	}

	.center h2 {
		font-size: 13px;
		letter-spacing: 1px;
		font-weight: 700;
		padding: 8px 20px;
		line-height: 1;
		margin: 0;
		background: #fdeff2;
		color: var(--primary);
		display: inline-block;
		text-transform: uppercase;
		border-radius: 50px;
	}

	.center h3 {
		margin: 15px 0 0 0;
		font-size: 32px;
		font-weight: 700;
	}

	.center h3 span {
		color: var(--primary);
	}

	.center p {
		margin: 15px auto 0 auto;
		font-weight: 600;
	}

	@media (min-width: 1024px) {
		.center p {
			width: 50%;
		}
	}

	.register .register-form .form-group {
		padding-bottom: 8px;
	}

	.register .register-form .error-message {
		color: #fff;
		background: var(--primary);
		text-align: left;
		padding: 15px;
		font-weight: 600;
	}

	.register .register-form .error-message br + br {
		margin-top: 25px;
	}

	.register .register-form .sent-message {
		color: #fff;
		background: #18d26e;
		text-align: center;
		padding: 15px;
		font-weight: 600;
	}

	.register .register-form .loading {
		background: #fff;
		text-align: center;
		padding: 15px;
	}

	.register .register-form .loading:before {
		content: '';
		display: inline-block;
		border-radius: 50%;
		width: 24px;
		height: 24px;
		margin: 0 10px -6px 0;
		border: 3px solid #18d26e;
		border-top-color: #eee;
		animation: animate-loading 1s linear infinite;
	}

	.register .register-form input,
	.register .register-form textarea {
		box-shadow: none;
		font-size: 14px;
	}

	.register .register-form input:focus,
	.register .register-form textarea:focus {
		border-color: var(--primary);
	}

	.register .register-form input {
		height: 44px;
	}

	.register .register-form .form-check-input {
		height: 1rem;
		width: 1rem;
	}

	.register .register-form .form-check-input:checked {
		background-color: var(--primary);
		border-color: var(--primary);
	}

	.register .register-form textarea {
		padding: 10px 12px;
	}

	.register .register-form button[type='submit'] {
		background: var(--primary);
		border: 0;
		padding: 10px 28px;
		color: #fff;
		transition: 0.4s;
		border-radius: 50px;
	}

	.register .register-form button[type='submit']:hover {
		background: var(--primary-d-2);
	}

	@media (max-width: 436px) {
		.register .register-form .form-group {
			margin-bottom: 15px;
		}
	}

	@keyframes animate-loading {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
</style>
